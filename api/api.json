{
    "openapi": "3.0.2",
    "info": {
        "title": "label.bkict.org Gateway API",
        "version": "1.0"
    },
    "components": {
        "schemas": {
            "User": {
                "type": "object",
                "description": "A user in the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "User ID, should be unique across all user."
                    },
                    "username": {
                        "type": "string",
                        "description": "Username, used to log into the system. Should be unique across all user.",
                        "minLength": 6,
                        "maxLength": 64,
                        "pattern": "^[a-zA-Z0-9]+$"
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The user's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    }
                }
            },
            "UserPassword": {
                "type": "string",
                "description": "The password of an user in the system.",
                "minLength": 8
            },
            "Token": {
                "type": "string",
                "description": "A token that allow the user to be authenticated to the system."
            },
            "UserRole": {
                "type": "object",
                "description": "A role in the system, which may contain some UserPermission that allows the user to operate on the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "User role ID, should be unique across all user role."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The user role's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description about the user role.",
                        "maxLength": 256
                    }
                }
            },
            "UserPermission": {
                "type": "object",
                "description": "A permission in the system, allowing the user to operate certain features on the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "User permission ID, should be unique across all user role."
                    },
                    "permission_name": {
                        "type": "string",
                        "description": "The permission name. Should only contain letter, number, underscore (_) and dot (.). Dots should be used to separate the namespace of the permission, allowing easy organization of the permission, such as user.manage, image.view, etc...",
                        "minLength": 1,
                        "maxLength": 256,
                        "pattern": "^[a-zA-Z0-9_.]+$"
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description about the user permission.",
                        "maxLength": 256
                    }
                }
            },
            "UserTag": {
                "type": "object",
                "description": "A tag value, that can be assigned to a user for classification purpose.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "User tag ID, should be unique across all user tag."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The user tag's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "description": {
                        "type": "string",
                        "description": "A short description about the user tag.",
                        "maxLength": 256
                    }
                }
            },
            "ImageType": {
                "type": "object",
                "description": "An image type for images on the system. The type of an image determines which tags the image can be assigned with and which labels the regions on that image can take.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Image type ID, should be unique across all image type."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The image type's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "has_predictive_model": {
                        "type": "boolean",
                        "description": "If true, the system can automatically detect regions on images of this type. This value should only be set manually by the developers."
                    }
                }
            },
            "RegionLabel": {
                "type": "object",
                "description": "A label that a region on an image can take. Each RegionLabel is associated with one ImageType only.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Region label ID, should be unique across all label."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The region label's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "color": {
                        "type": "string",
                        "description": "The color for regions assigned with this label.",
                        "pattern": "^#[0-9A-F]{6}$"
                    }
                }
            },
            "ImageTagGroup": {
                "type": "object",
                "description": "A group of tag values. If an Image Tag Group is associated with an Image Type, images of that Image Type can be assigned with Tag values of that Image Tag Group.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Image tag group ID, should be unique across all tag group."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The image tag group's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    },
                    "is_single_value": {
                        "type": "boolean",
                        "description": "If true, each image can only be assigned with one tag of this tag group. Otherwise, multiple tags of this group can be assigned to the same image."
                    }
                }
            },
            "ImageTag": {
                "type": "object",
                "description": "A tag value, that can be assigned to an image for classification purpose.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Image tag ID, should be unique across all tag."
                    },
                    "display_name": {
                        "type": "string",
                        "description": "The image tag's name, to be displayed on the UI.",
                        "minLength": 1,
                        "maxLength": 256
                    }
                }
            },
            "Image": {
                "type": "object",
                "description": "An image on the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Image ID, should be unique across all image."
                    },
                    "upload_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "upload_time": {
                        "type": "integer",
                        "description": "The time when this image was uploaded to the system."
                    },
                    "publish_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "publish_time": {
                        "type": "integer",
                        "description": "The time when this image was published for other users to verify."
                    },
                    "verify_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "verify_time": {
                        "type": "integer",
                        "description": "The time when this image was marked as verified."
                    },
                    "original_file_name": {
                        "type": "string",
                        "description": "The original file name of the image, when uploaded by the user."
                    },
                    "image_url": {
                        "type": "string",
                        "description": "The URL to the full-size image on the system."
                    },
                    "thumbnail_url": {
                        "type": "string",
                        "description": "The URL to the compressed small-size thumbnail of the image, for display purpose."
                    },
                    "description": {
                        "type": "string",
                        "description": "The description for the image."
                    },
                    "image_type": {
                        "$ref": "#/components/schemas/ImageType"
                    },
                    "status": {
                        "type": "integer",
                        "description": "The status of the image on the system. Can take a value of 0 (UPLOADED - for images that are just uploaded to the system), 1 (PUBLISHED - for images that are published for other users to verify), 2 (VERIFIED - for images that are verified by other users) or 3 (EXCLUDED - for images that are excluded from publication and are intended for presentation only).",
                        "minimum": 0,
                        "maximum": 3
                    }
                }
            },
            "ImageListFilterOptions": {
                "type": "object",
                "description": "An object representing the filter options available to filter for images on the system.",
                "properties": {
                    "image_type_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "maxItems": 10
                    },
                    "image_tag_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = true)."
                    },
                    "region_label_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = true).",
                        "maxItems": 10
                    },
                    "uploaded_by_user_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of user IDs. If provided, filter for images that are uploaded by one of these users.",
                        "maxItems": 10
                    },
                    "published_by_user_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "maxItems": 10
                    },
                    "verified_by_user_id_list": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "maxItems": 10
                    },
                    "upload_time_start": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "default": 0
                    },
                    "upload_time_end": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "default": 0
                    },
                    "publish_time_start": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "default": 0
                    },
                    "publish_time_end": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "default": 0
                    },
                    "verify_time_start": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "default": 0
                    },
                    "verify_time_end": {
                        "type": "integer",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "default": 0
                    },
                    "original_filename_query": {
                        "type": "string",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "maxLength": 256,
                        "default": ""
                    },
                    "filter_image_status_list": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 3
                        },
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "maxItems": 10
                    },
                    "must_match_all_image_tags": {
                        "type": "boolean",
                        "description": "If true, images in the results must have all image tags provided in the filter."
                    },
                    "must_match_all_region_labels": {
                        "type": "boolean",
                        "description": "If true, images in the results must have all region labels provided in the filter."
                    },
                    "must_be_bookmarked": {
                        "type": "boolean",
                        "description": "If true, images in the results must be bookmarked by the session user."
                    },
                    "must_have_description": {
                        "type": "boolean",
                        "description": "If true, images in the results must have non-empty description."
                    }
                }
            },
            "ImageBookmark": {
                "type": "object",
                "description": "A bookmark on an image. Users can bookmark images to add personal notes of their own, or to make it easier to track an image.",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description an user added to an image bookmark."
                    }
                }
            },
            "Point": {
                "type": "object",
                "description": "A point on a 2D plane.",
                "properties": {
                    "x": {
                        "type": "number",
                        "description": "The x-coordinate of the point."
                    },
                    "y": {
                        "type": "number",
                        "description": "The y-coordinate of the point."
                    }
                }
            },
            "Polygon": {
                "type": "object",
                "description": "A polygon on a 2D plane. Polygons are represented by an array of its vertices - two consecutive elements of the array, as well as the first and the last element of the array share an edge together.",
                "properties": {
                    "vertex": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Point"
                        },
                        "minItems": 3,
                        "maxItems": 327680
                    }
                }
            },
            "Region": {
                "type": "object",
                "description": "A region on an image on the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Region ID, should be unique across all region."
                    },
                    "drawn_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "labeled_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "border": {
                        "$ref": "#/components/schemas/Polygon"
                    },
                    "holes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polygon"
                        },
                        "description": "The holes inside the border of the region. Holes cannot intersect with each other, and cannot intersect with the border of the region.",
                        "maxItems": 10
                    },
                    "label": {
                        "$ref": "#/components/schemas/RegionLabel"
                    }
                }
            },
            "RegionOperationLog": {
                "type": "object",
                "description": "A log of operations on a region.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Log ID, should be unique across all log."
                    },
                    "by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "operation_time": {
                        "type": "integer",
                        "description": "The time when this operation took place."
                    },
                    "operation_type": {
                        "type": "integer",
                        "description": "The type of operation. Can take a value of 0 (DRAW - for operations where the user draws/redraws the border/holes of the region) or 1 (LABEL - for operations where the user assign a label for the region)."
                    },
                    "operation_metadata": {
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/RegionOperationLogDrawMetadata"
                            },
                            {
                                "$ref": "#/components/schemas/RegionOperationLogLabelMetadata"
                            }
                        ],
                        "description": "Metadata of the operation. For DRAW operations, this is a RegionOperationLogDrawMetadata object. For LABEL operations, this is a RegionOperationLogLabelMetadata object."
                    }
                }
            },
            "RegionOperationLogDrawMetadata": {
                "type": "object",
                "description": "Metadata for DRAW operation on a Region.",
                "properties": {
                    "old_border": {
                        "$ref": "#/components/schemas/Region/properties/border"
                    },
                    "old_holes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polygon"
                        },
                        "description": "The list of holes in the region before the operation."
                    },
                    "new_border": {
                        "$ref": "#/components/schemas/Region/properties/border"
                    },
                    "new_holes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Polygon"
                        },
                        "description": "The list of holes in the region after the operation."
                    }
                }
            },
            "RegionOperationLogLabelMetadata": {
                "type": "object",
                "description": "Metadata for LABEL operation on a Region.",
                "properties": {
                    "old_label": {
                        "$ref": "#/components/schemas/Region/properties/label"
                    },
                    "new_label": {
                        "$ref": "#/components/schemas/Region/properties/label"
                    }
                }
            },
            "Export": {
                "type": "object",
                "description": "Export result from the system. Can be either a dataset export - the entire dataset compressed into a zip file, along with metadata files - or an Excel report of the dataset information. An export is valid for 7 days before being deleted from the system.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Export ID, should be unique across all export."
                    },
                    "requested_by_user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "type": {
                        "type": "integer",
                        "description": "The type of the export. Can take a value of 0 (DATASET) - for full dataset export or 1 (EXCEL) - for dataset information Excel worksheet export.",
                        "minimum": 0,
                        "maximum": 1
                    },
                    "request_time": {
                        "type": "integer",
                        "description": "The time when this export was requested."
                    },
                    "status": {
                        "type": "integer",
                        "description": "The status of the export on the system. Can take a value of 0 (REQUESTED) - for exports that have just been requested, 1 (PROCESSING) - for exports that are currently being processed and 2 (DONE) - for exports that have been successfully processed.",
                        "minimum": 0,
                        "maximum": 2
                    },
                    "expire_time": {
                        "type": "integer",
                        "description": "The time when this export will stop being available on the system."
                    },
                    "exported_file_url": {
                        "type": "string",
                        "description": "The URL to download the exported file."
                    }
                }
            },
            "PinnedPage": {
                "type": "object",
                "description": "A pinned page. User can pin pages on the system in order to be able to return to the page more quickly.",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Pinned Page ID, should be unique across all pinned page."
                    },
                    "pin_time": {
                        "type": "integer",
                        "description": "The time of pinning the page."
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL to be pinned."
                    },
                    "description": {
                        "type": "string",
                        "description": "User-inputted description for the pinned page."
                    },
                    "screenshot_url": {
                        "type": "string",
                        "description": "An URL to the screenshot of the pinned page at the time of pinning."
                    }
                }
            }
        },
        "securitySchemes": {
            "AuthenticationToken": {
                "type": "apiKey",
                "in": "cookie",
                "name": "LABEL_BKICT_AUTH"
            }
        }
    },
    "paths": {
        "/api/users": {
            "post": {
                "description": "Create a new user.",
                "tags": [
                    "User Management"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "$ref": "#/components/schemas/User/properties/username"
                                    },
                                    "display_name": {
                                        "$ref": "#/components/schemas/User/properties/display_name"
                                    },
                                    "password": {
                                        "$ref": "#/components/schemas/UserPassword"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User created successfully.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create user because the username or display name does not satisfy the constraints."
                    },
                    "409": {
                        "description": "Failed to create user because the username has already been taken."
                    }
                }
            },
            "get": {
                "description": "Get user list. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending username) or 3 (sorted by descending username), 4 (sorted by ascending display name) or 5 (sorted by descending display name).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 5,
                            "default": 0
                        }
                    },
                    {
                        "name": "with_user_role",
                        "description": "If equal to 1, will return the list of user roles each user in the list has.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "with_user_tag",
                        "description": "If equal to 1, will return the list of user tags each user in the list has.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "username_query",
                        "description": "If provided, filter for user that have user name or display name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_user_tags",
                        "description": "A list of user tag IDs. If provided, filter for users that belong to one of these user tags.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_user_roles",
                        "description": "A list of user role IDs. If provided, filter for users that have one of these user roles.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_user_count": {
                                            "type": "integer",
                                            "description": "The total number of users."
                                        },
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            },
                                            "description": "The list of users."
                                        },
                                        "user_role_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/UserRole"
                                                }
                                            },
                                            "description": "If with_user_role = 1, this field is the list of user roles each user in user_list has, in the same order. If with_user_role = 0, this field is not returned."
                                        },
                                        "user_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/UserTag"
                                                }
                                            },
                                            "description": "If with_user_tag = 1, this field is the list of user tags each user in user_list has, in the same order. If with_user_tag = 0, this field is not returned."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/users/search": {
            "get": {
                "description": "Search the list of users using username and display name. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "query",
                        "description": "The query string.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            },
                                            "description": "The list of users."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user list because the user is not logged in."
                    }
                }
            }
        },
        "/api/users/{user_id}": {
            "patch": {
                "description": "Update user information. User needs to have `users.manage` permission in order to call this API to update other user's information successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "$ref": "#/components/schemas/User/properties/username"
                                    },
                                    "display_name": {
                                        "$ref": "#/components/schemas/User/properties/display_name"
                                    },
                                    "password": {
                                        "$ref": "#/components/schemas/UserPassword"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    },
                    "409": {
                        "description": "Failed to update user because the username has already been taken."
                    }
                }
            }
        },
        "/api/users/{user_id}/manageable-image-users": {
            "post": {
                "description": "Add a new user to the list of users, whose images can be managed by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_of_user_id": {
                                        "$ref": "#/components/schemas/User/properties/id"
                                    },
                                    "can_edit": {
                                        "type": "boolean",
                                        "description": "If true, the user can edit images of this user. If false, the user can only view the images."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_can_manage_user_image": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "$ref": "#/components/schemas/User"
                                                },
                                                "can_edit": {
                                                    "type": "boolean",
                                                    "description": "If true, the user can edit images of this user. If false, the user can only view the images."
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user because the user whose image can be managed is the same as the one being updated."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user because either one of the users cannot be found."
                    },
                    "409": {
                        "description": "Failed to update user because the user has already been in the list."
                    }
                }
            },
            "get": {
                "description": "Get the list of users, whose images can be managed by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be retrieved.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_user_count": {
                                            "type": "integer",
                                            "description": "The total number of user in the list."
                                        },
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user": {
                                                        "$ref": "#/components/schemas/User"
                                                    },
                                                    "can_edit": {
                                                        "type": "boolean",
                                                        "description": "If true, the user can edit images of this user. If false, the user can only view the images."
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to get user list because the arguments provided do not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "404": {
                        "description": "Failed to remove user because the user cannot be found."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/users/{user_id}/manageable-image-users/{image_of_user_id}": {
            "patch": {
                "description": "Update the relation of a new user in the list of users, whose images can be managed by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_of_user_id",
                        "in": "path",
                        "description": "The user whose image can be managed.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "can_edit": {
                                        "type": "boolean",
                                        "description": "If true, the user can edit images of this user. If false, the user can only view the images."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_can_manage_user_image": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "$ref": "#/components/schemas/User"
                                                },
                                                "can_edit": {
                                                    "type": "boolean",
                                                    "description": "If true, the user can edit images of this user. If false, the user can only view the images."
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user because the user whose image being managed is the same as the one being updated."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user because either one of the users cannot be found."
                    },
                    "409": {
                        "description": "Failed to remove user because the user is not in the list."
                    }
                }
            },
            "delete": {
                "description": "Remove an user from the list of users, whose images can be managed by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_of_user_id",
                        "in": "path",
                        "description": "The user whose image can be managed.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user because either one of the users cannot be found."
                    },
                    "409": {
                        "description": "Failed to remove user because the user is not in the list."
                    }
                }
            }
        },
        "/api/users/{user_id}/verifiable-image-users": {
            "post": {
                "description": "Add a new user to the list of users, whose images can be verified by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_of_user_id": {
                                        "$ref": "#/components/schemas/User/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_can_verify_user_image": {
                                            "type": "object",
                                            "properties": {
                                                "user": {
                                                    "$ref": "#/components/schemas/User"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user because the user whose image can be verified is the same as the one being updated."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update user because either one of the users cannot be found."
                    },
                    "409": {
                        "description": "Failed to update user because the user has already been in the list."
                    }
                }
            },
            "get": {
                "description": "Get the list of users, whose images can be verified by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be retrieved.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_user_count": {
                                            "type": "integer",
                                            "description": "The total number of user in the list."
                                        },
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "user": {
                                                        "$ref": "#/components/schemas/User"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to get user list because the arguments provided do not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user because the user cannot be found."
                    }
                }
            }
        },
        "/api/users/{user_id}/verifiable-image-users/{image_of_user_id}": {
            "delete": {
                "description": "Remove an user from the list of users, whose images can be verified by the provided user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user whose information will be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_of_user_id",
                        "in": "path",
                        "description": "The user whose image can be verified.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user because either one of the users cannot be found."
                    },
                    "409": {
                        "description": "Failed to remove user because the user is not in the list."
                    }
                }
            }
        },
        "/api/sessions/password": {
            "post": {
                "description": "Login with password. If the user is successfully logged in, an authorization token is included in the response as a cookie, allowing the user to operate on the system.",
                "tags": [
                    "Session Management"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "username": {
                                        "type": "string",
                                        "description": "Username, used to log into the system. Should be unique across all user."
                                    },
                                    "password": {
                                        "type": "string",
                                        "description": "The password of an user in the system."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User is logged in successfully.",
                        "headers": {
                            "Authorization": {
                                "description": "Authentication token for the newly created user.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                },
                                "required": true
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "user_role_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserRole"
                                            }
                                        },
                                        "user_permission_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to log user in because of incorrect password."
                    },
                    "404": {
                        "description": "Failed to log user in because there is no user with the provided username."
                    }
                }
            }
        },
        "/api/sessions/user": {
            "get": {
                "description": "Get the current session's user information. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "Session Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved session's user information successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user": {
                                            "$ref": "#/components/schemas/User"
                                        },
                                        "user_role_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserRole"
                                            }
                                        },
                                        "user_permission_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserPermission"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid session information, no user is associated with it."
                    }
                }
            }
        },
        "/api/sessions": {
            "delete": {
                "description": "Log out. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "Session Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User is logged out successfully."
                    },
                    "401": {
                        "description": "Failed to log user out because the user has not been logged in."
                    }
                }
            }
        },
        "/api/roles": {
            "post": {
                "description": "Create a new user role. User needs to have `user_roles.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/UserRole/properties/display_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserRole/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User role created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create user role because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create user role because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create user role because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get user role list. User needs to have `user_roles.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending display name) or 3 (sorted by descending display name).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 5,
                            "default": 0
                        }
                    },
                    {
                        "name": "with_user_permission",
                        "description": "If equal to 1, will return the list of user permissions each user role in the list has.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_user_role_count": {
                                            "type": "integer",
                                            "description": "The total number of user roles."
                                        },
                                        "user_role_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserRole"
                                            },
                                            "description": "The list of user roles."
                                        },
                                        "user_permission_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/UserPermission"
                                                }
                                            },
                                            "description": "If with_user_permission = 1, this field is the list of user permissions each user role in user_role_list has, in the same order. If with_user_permission = 0, this field is not returned."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user role list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user role list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user role list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/roles/{user_role_id}": {
            "patch": {
                "description": "Update user role. User needs to have `user_roles.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_role_id",
                        "in": "path",
                        "description": "The ID of the user role to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/UserRole/properties/display_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserRole/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User role updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserRole"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user role because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user role because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user role because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update user role because no user role with the provided user_role_id is found."
                    }
                }
            },
            "delete": {
                "description": "Delete user role. User needs to have `user_roles.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_role_id",
                        "in": "path",
                        "description": "The ID of the user role to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete user role because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete user role because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete user role because no user role with the provided user_role_id is found."
                    }
                }
            }
        },
        "/api/users/{user_id}/roles": {
            "post": {
                "description": "Add a user role to a user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user to be added user role for.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_role_id": {
                                        "$ref": "#/components/schemas/UserRole/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User role added to user successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to add user role to user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to add user role to user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to add user role to user because user with user_id or user role with user_role_id does not exist."
                    },
                    "409": {
                        "description": "Failed to add user role to user because user with user_id already has user role with user_role_id."
                    }
                }
            }
        },
        "/api/users/{user_id}/roles/{user_role_id}": {
            "delete": {
                "description": "Remove a user role from a user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Role Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user to be remove user role for.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "user_role_id",
                        "in": "path",
                        "description": "The user role to be removed from the user.",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role removed to user successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove user role from user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove user role from user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user role from user because user with user_id or user role with user_role_id does not exist."
                    },
                    "409": {
                        "description": "Failed to remove user role from user because user with user_id does not have user role with user_role_id."
                    }
                }
            }
        },
        "/api/permissions": {
            "post": {
                "description": "Create a new user permission. User needs to have `user_permissions.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission_name": {
                                        "$ref": "#/components/schemas/UserPermission/properties/permission_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserPermission/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User permission created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPermission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create user permission because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create user permission because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create user permission because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get user permission list. User needs to have `user_permissions.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User role list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_permission_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserPermission"
                                            },
                                            "description": "The list of user permissions."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to retrieve user permission list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user permission list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/permissions/{user_permission_id}": {
            "patch": {
                "description": "Update user permission. User needs to have `user_permissions.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_permission_id",
                        "in": "path",
                        "description": "The user permission to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/UserPermission/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "permission_name": {
                                        "$ref": "#/components/schemas/UserPermission/properties/permission_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserPermission/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User permission updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPermission"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user permission because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user permission because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user permission because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update user permission because no user permission with the provided user_permission_id is found."
                    }
                }
            },
            "delete": {
                "description": "Delete user permission. User needs to have `user_permissions.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_permission_id",
                        "in": "path",
                        "description": "The user permission to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/UserPermission/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User permission deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete user permission because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete user permission because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete user permission because no user permission with the provided user_permission_id is found."
                    }
                }
            }
        },
        "/api/roles/{user_role_id}/permissions": {
            "post": {
                "description": "Add a user permission to a user role. User needs to have `user_roles.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_role_id",
                        "in": "path",
                        "description": "The user role to be added user permission for.",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_permission_id": {
                                        "$ref": "#/components/schemas/UserPermission/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User permission added to user role successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to add user permission to user role because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to add user permission to user role because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to add user permission to user role because user role with user_role_id or user permission with user_permission_id does not exist."
                    },
                    "409": {
                        "description": "Failed to add user permission to user role because user role with user_role_id already has user permission with user_permission_id."
                    }
                }
            }
        },
        "/api/roles/{user_role_id}/permissions/{user_permission_id}": {
            "delete": {
                "description": "Remove a user permission from a user role. User needs to have `user_roles.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Permission Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_role_id",
                        "in": "path",
                        "description": "The user role to be remove user permission for.",
                        "schema": {
                            "$ref": "#/components/schemas/UserRole/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "user_permission_id",
                        "in": "path",
                        "description": "The user permission to be removed from the user role.",
                        "schema": {
                            "$ref": "#/components/schemas/UserPermission/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User permission removed from user role successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove user permission from user role because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove user permission from user role because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user permission from user role because user role with user_role_id or user permission with user_permission_id does not exist."
                    },
                    "409": {
                        "description": "Failed to remove user permission from user role because user role with user_role_id does not have user permission with user_permission_id."
                    }
                }
            }
        },
        "/api/tags": {
            "post": {
                "description": "Create a new user tag. User needs to have `user_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/UserTag/properties/display_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserTag/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User tag created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create user tag because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create user tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create user tag because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get user tag list. User needs to have `user_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending display name) or 3 (sorted by descending display name).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 5,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User tag list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_user_tag_count": {
                                            "type": "integer",
                                            "description": "The total number of user tags."
                                        },
                                        "user_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/UserTag"
                                            },
                                            "description": "The list of user tags."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user tag list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user tag list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user tag list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/tags/{user_tag_id}": {
            "patch": {
                "description": "Update user tag. User needs to have `user_tags.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_tag_id",
                        "in": "path",
                        "description": "The ID of the user tag to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/UserTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/UserTag/properties/display_name"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/UserTag/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User tag updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update user tag because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update user tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update user tag because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update user tag because no user tag with the provided user_tag_id is found."
                    }
                }
            },
            "delete": {
                "description": "Delete user tag. User needs to have `user_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_tag_id",
                        "in": "path",
                        "description": "The ID of the user tag to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/UserTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User tag deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete user tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete user tag because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete user tag because no user tag with the provided user_tag_id is found."
                    }
                }
            }
        },
        "/api/users/{user_id}/tags": {
            "post": {
                "description": "Add a user tag to a user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user to be added user tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_tag_id": {
                                        "$ref": "#/components/schemas/UserTag/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User tag added to user successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to add user tag to user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to add user tag to user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to add user tag to user because user with user_id or user tag with user_tag_id does not exist."
                    },
                    "409": {
                        "description": "Failed to add user tag to user because user with user_id already has user tag with user_tag_id."
                    }
                }
            }
        },
        "/api/users/{user_id}/tags/{user_tag_id}": {
            "delete": {
                "description": "Remove a user tag from a user. User needs to have `users.manage` permission in order to call this API successfully.",
                "tags": [
                    "User Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "user_id",
                        "in": "path",
                        "description": "The user to be remove user tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/User/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "user_tag_id",
                        "in": "path",
                        "description": "The user tag to be removed from the user.",
                        "schema": {
                            "$ref": "#/components/schemas/UserTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User tag removed to user successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove user tag from user because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove user tag from user because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove user tag from user because user with user_id or user tag with user_tag_id does not exist."
                    },
                    "409": {
                        "description": "Failed to remove user tag from user because user with user_id does not have user tag with user_tag_id."
                    }
                }
            }
        },
        "/api/image-types": {
            "post": {
                "description": "Create a new image type. User needs to have `image_types.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageType/properties/display_name"
                                    },
                                    "has_predictive_model": {
                                        "$ref": "#/components/schemas/ImageType/properties/has_predictive_model"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image type created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create image type because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create image type because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create image type because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get image type list. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "with_region_label",
                        "in": "query",
                        "description": "If equal to 1, will return the list of region labels each image type in the list has.",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image type list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_type_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ImageType"
                                            },
                                            "description": "The list of image types."
                                        },
                                        "region_label_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/RegionLabel"
                                                }
                                            },
                                            "description": "If with_region_label = 1, this field is the list of region labels each image type in image_type_list has, in the same order. If with_region_label = 0, this field is not returned."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image type list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve image type list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve image type list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/image-types/{image_type_id}": {
            "get": {
                "description": "Get an image type. User needs to be logged in in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to get.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image type updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_type": {
                                            "$ref": "#/components/schemas/ImageType"
                                        },
                                        "region_label_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RegionLabel"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to get image type because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to get image type because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to get image type because no image type with the provided image_type_id is found."
                    }
                }
            },
            "patch": {
                "description": "Update image type. User needs to have `image_types.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageType/properties/display_name"
                                    },
                                    "has_predictive_model": {
                                        "$ref": "#/components/schemas/ImageType/properties/has_predictive_model"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image type updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageType"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image type because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update image type because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image type because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image type because no image type with the provided image_type_id is found."
                    }
                }
            },
            "delete": {
                "description": "Delete image type. User needs to have `image_types.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image type deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete image type because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete image type because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete image type because no image type with the provided image_type_id is found."
                    }
                }
            }
        },
        "/api/image-types/{image_type_id}/labels": {
            "post": {
                "description": "Create a new region label for an image type. User needs to have `image_types.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to be added region label for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/display_name"
                                    },
                                    "color": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/color"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Region label created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegionLabel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create region label because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create region label because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create region label because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to create region label because image type with image_type_id does not exist."
                    }
                }
            }
        },
        "/api/image-types/{image_type_id}/labels/{region_label_id}": {
            "patch": {
                "description": "Update a region label of an image type. User needs to have `image_types.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to updated region label for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_label_id",
                        "in": "path",
                        "description": "The region label to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/RegionLabel/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/display_name"
                                    },
                                    "color": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/color"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Region label updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RegionLabel"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to updated region label because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to updated region label because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to updated region label because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to updated region label because image type with image_type_id or region label with region_label_id does not exist."
                    }
                }
            },
            "delete": {
                "description": "Delete a region label of an image type. User needs to have `image_types.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Type Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to deleted region label for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_label_id",
                        "in": "path",
                        "description": "The region label to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/RegionLabel/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Region label deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to deleted region label because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to deleted region label because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to deleted region label because image type with image_type_id or region label with region_label_id does not exist."
                    }
                }
            }
        },
        "/api/image-tag-groups": {
            "post": {
                "description": "Create a new image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageTagGroup/properties/display_name"
                                    },
                                    "is_single_value": {
                                        "$ref": "#/components/schemas/ImageTagGroup/properties/is_single_value"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image tag group created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageTagGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create image tag group because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create image tag group because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create image tag group because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get image tag group list. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "with_image_tag",
                        "in": "query",
                        "description": "If equal to 1, will return the list of tags each image tag group in the list has.",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "with_image_type",
                        "in": "query",
                        "description": "If equal to 1, will return the list of allow image types that each image tag group in the list has.",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image tag group list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_tag_group_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ImageTagGroup"
                                            },
                                            "description": "The list of image tag groups."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "If with_tag = 1, this field is the list of tags each tag group in image_tag_group_list has, in the same order. If with_tag = 0, this field is not returned."
                                        },
                                        "image_type_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageType"
                                                }
                                            },
                                            "description": "If with_allowed_image_type = 1, this field is the list of allowed image type each tag group in image_tag_group_list has, in the same order. If with_allowed_image_type = 0, this field is not returned."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image tag group list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve image tag group list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve image tag group list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/image-tag-groups/{image_tag_group_id}": {
            "patch": {
                "description": "Update image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageTagGroup/properties/display_name"
                                    },
                                    "is_single_value": {
                                        "$ref": "#/components/schemas/ImageTagGroup/properties/is_single_value"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image tag group updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageTagGroup"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image tag group because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update image tag group because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image tag group because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image tag group because no image tag group with the provided image_tag_group_id is found."
                    }
                }
            },
            "delete": {
                "description": "Delete image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image tag group deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete image tag group because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete image tag group because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete image tag group because no image tag group with the provided image_tag_group_id is found."
                    }
                }
            }
        },
        "/api/image-tag-groups/{image_tag_group_id}/tags": {
            "post": {
                "description": "Create a new image tag for an image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to be added image tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageTag/properties/display_name"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image tag created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to create image tag because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to create image tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create image tag because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to create image tag because image tag group with image_tag_group_id does not exist."
                    }
                }
            }
        },
        "/api/image-tag-groups/{image_tag_group_id}/tags/{image_tag_id}": {
            "patch": {
                "description": "Update an image tag of an image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to updated image tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_tag_id",
                        "in": "path",
                        "description": "The image tag to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "display_name": {
                                        "$ref": "#/components/schemas/ImageTag/properties/display_name"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image tag updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ImageTag"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to updated image tag because the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to updated image tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to updated image tag because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to updated image tag because image tag group with image_tag_group_id or image tag with image_tag_id does not exist."
                    }
                }
            },
            "delete": {
                "description": "Delete an image tag of an image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to deleted image tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_tag_id",
                        "in": "path",
                        "description": "The image tag to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image tag deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to deleted image tag because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to deleted image tag because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to deleted image tag because image tag group with image_tag_group_id or image tag with image_tag_id does not exist."
                    }
                }
            }
        },
        "/api/image-tag-groups/{image_tag_group_id}/image-types": {
            "post": {
                "description": "Add an image type to the list of allowed image types of an image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to deleted image tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_type_id": {
                                        "$ref": "#/components/schemas/ImageType/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Added image type to image tag group successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to add image type to image tag group because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to add image type to image tag group because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to add image type to image tag group because image tag group with image_tag_group_id or image type with image_type_id does not exist."
                    },
                    "409": {
                        "description": "Failed to add image type to image tag group because image tag group with image_tag_group_id already has image type with image_type_id in the list of allowed image types."
                    }
                }
            }
        },
        "/api/image-tag-groups/{image_tag_group_id}/image-types/{image_type_id}": {
            "delete": {
                "description": "Remove an image type from the list of allowed image types of an image tag group. User needs to have `image_tags.manage` permission in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_tag_group_id",
                        "in": "path",
                        "description": "The image tag group to deleted image tag for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTagGroup/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to be removed.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Removed image type from image tag group successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove image type from image tag group because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove image type from image tag group because user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove image type from image tag group because image tag group with image_tag_group_id or image type with image_type_id does not exist."
                    },
                    "409": {
                        "description": "Failed to remove image type from image tag group because image tag group with image_tag_group_id does not have image type with image_type_id in the list of allowed image types."
                    }
                }
            }
        },
        "/api/image-types/{image_type_id}/image-tag-groups": {
            "get": {
                "description": "Get the list of tag groups and tag values that can be assigned to an image type. User needs to already be logged in to the system in order to call this API successfully.",
                "tags": [
                    "Image Tag Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_type_id",
                        "in": "path",
                        "description": "The image type to be retrieve tag group list for.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageType/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image tag group list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_tag_group_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ImageTagGroup"
                                            },
                                            "description": "The list of eligible image tag groups for the requested image type."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "The list of eligible image tag for the requested image type."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image type with image_type_id does not exist."
                    }
                }
            }
        },
        "/api/images": {
            "post": {
                "description": "Upload a new image to the system. User needs to have `images.upload` permission in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_type_id": {
                                        "type": "string",
                                        "description": "Image type ID, should be unique across all image type.",
                                        "pattern": "^\\d*$",
                                        "default": ""
                                    },
                                    "image_tag_id_list": {
                                        "type": "string",
                                        "description": "A comma-separated list of Image Tag IDs, to be automatically assigned to the image after being uploaded.",
                                        "pattern": "^((\\d+,){0,9}(\\d+))?$",
                                        "default": ""
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/Image/properties/description"
                                    },
                                    "image_file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The image file to be uploaded."
                                    }
                                }
                            },
                            "encoding": {
                                "image_file": {
                                    "contentType": "image/*"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The image is uploaded successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Image"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to upload image because any of the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to upload image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to upload image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to upload image because image_type_id is provided and image type with image_type_id does not exist, or image_tag_id_list is provided and the image tags with those IDs do not exist."
                    },
                    "409": {
                        "description": "Failed to upload image because image_type_id is provided, but the list of image tag IDs provided in the request is not allowed for the image type."
                    }
                }
            },
            "patch": {
                "description": "Update image list. This feature only allows mass updating of image type. For every image in the request, user needs to either (1) have `images.manage.self` permission and is updating an image of their own, or (2) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_id_list": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Image/properties/id"
                                        },
                                        "minItems": 1,
                                        "maxItems": 500,
                                        "description": "The list of image to be updated."
                                    },
                                    "image_type_id": {
                                        "$ref": "#/components/schemas/ImageType/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The image list is updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image list because any of the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update image list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image list because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image list because one or more images in the provided list, or the image type with image_type_id does not exist."
                    }
                }
            },
            "delete": {
                "description": "Delete image list. For every image in the request, user needs to either (1) have `images.manage.self` permission and is deleting an image of their own, or (2) have `images.manage.all` permission and is deleting an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_id_list": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Image/properties/id"
                                        },
                                        "minItems": 1,
                                        "maxItems": 500,
                                        "description": "The list of image to be deleted."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The image list is updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to delete image list because any of the information provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to delete image list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete image list because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete image list because one or more images in the provided list does not exist."
                    }
                }
            }
        },
        "/api/images/detection-task": {
            "post": {
                "description": "Request for region detection for a list of images. User needs to either (1) have `images.manage.self` permission and is updating images of their own,  (2) have `images.manage.all` permission and is updating images that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_id_list": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Image/properties/id"
                                        },
                                        "description": "The imageID list to be updated.",
                                        "maxItems": 500
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Requested for region detection successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to requested for region detection because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to requested for region detection because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to requested for region detection because one or more of the images do not exist."
                    },
                    "409": {
                        "description": "Failed to requested for region detection because there is an existing detection task for one or more the images."
                    }
                }
            }
        },
        "/api/sessions/user/images": {
            "get": {
                "description": "Get image list uploaded by the current sessions's user. User needs to have `images.manage.self` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 500,
                            "default": 12
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending upload time), 3 (sorted by descending upload time), 4 (sorted by ascending publish time), 5 (sorted by descending publish time), 6 (sorted by ascending verify time), 7 (sorted by descending verify time).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 7,
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_image_types",
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_image_tags",
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_region_labels",
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_published_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_verified_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_upload_time_start",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_upload_time_end",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_start",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_end",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_start",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_end",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "original_filename_query",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_image_statuses",
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Image/properties/status"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "must_match_all_image_tags",
                        "description": "If equal to 1, images in the results must have all image tags provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_match_all_region_labels",
                        "description": "If equal to 1, images in the results must have all region labels provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_be_bookmarked",
                        "description": "If equal to 1, images in the results must be bookmarked by the session user.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_have_description",
                        "description": "If equal to 1, images in the results must have non-empty description.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_image_count": {
                                            "type": "integer",
                                            "description": "The total number of images meeting the filter condition."
                                        },
                                        "image_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Image"
                                            },
                                            "description": "The list of images meeting the filter condition, in the requested page."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "The list of image tags each image in image_list has, in the same order."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image list because one or more of the arguments provided is invalid."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/manageable-image-users": {
            "get": {
                "description": "Search the list of users, whose images can be managed by the session's user, using username and display name. User needs to have `images.manage.all` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "query",
                        "description": "The query string.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            },
                                            "description": "The list of users."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/manageable-images": {
            "get": {
                "description": "Get image list uploaded by all users, that the current session's user is allowed to manage. User needs to have `images.manage.all` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 500,
                            "default": 12
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending upload time), 3 (sorted by descending upload time), 4 (sorted by ascending publish time), 5 (sorted by descending publish time), 6 (sorted by ascending verify time), 7 (sorted by descending verify time).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 7,
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_image_types",
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_image_tags",
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_region_labels",
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_uploaded_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are uploaded by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_published_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_verified_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_upload_time_start",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_upload_time_end",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_start",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_end",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_start",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_end",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "original_filename_query",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_image_statuses",
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Image/properties/status"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "must_match_all_image_tags",
                        "description": "If equal to 1, images in the results must have all image tags provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_match_all_region_labels",
                        "description": "If equal to 1, images in the results must have all region labels provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_be_bookmarked",
                        "description": "If equal to 1, images in the results must be bookmarked by the session user.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_have_description",
                        "description": "If equal to 1, images in the results must have non-empty description.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_image_count": {
                                            "type": "integer",
                                            "description": "The total number of images meeting the filter condition."
                                        },
                                        "image_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Image"
                                            },
                                            "description": "The list of images meeting the filter condition, in the requested page."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "The list of image tags each image in image_list has, in the same order."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image list because one or more of the arguments provided is invalid."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/verifiable-image-users": {
            "get": {
                "description": "Search the list of users, whose images can be verified by the session's user, using username and display name. User needs to have `images.verify` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "query",
                        "description": "The query string.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            },
                                            "description": "The list of users."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/verifiable-images": {
            "get": {
                "description": "Get image list uploaded by all users, that the current session's user is allowed to verify. User needs to have `images.verify` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 500,
                            "default": 12
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending upload time), 3 (sorted by descending upload time), 4 (sorted by ascending publish time), 5 (sorted by descending publish time), 6 (sorted by ascending verify time), 7 (sorted by descending verify time).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 7,
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_image_types",
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_image_tags",
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_region_labels",
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_uploaded_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are uploaded by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_published_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_verified_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_upload_time_start",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_upload_time_end",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_start",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_end",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_start",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_end",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "original_filename_query",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_image_statuses",
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Image/properties/status"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "must_match_all_image_tags",
                        "description": "If equal to 1, images in the results must have all image tags provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_match_all_region_labels",
                        "description": "If equal to 1, images in the results must have all region labels provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_be_bookmarked",
                        "description": "If equal to 1, images in the results must be bookmarked by the session user.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_have_description",
                        "description": "If equal to 1, images in the results must have non-empty description.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_image_count": {
                                            "type": "integer",
                                            "description": "The total number of images meeting the filter condition."
                                        },
                                        "image_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Image"
                                            },
                                            "description": "The list of images meeting the filter condition, in the requested page."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "The list of image tags each image in image_list has, in the same order."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image list because one or more of the arguments provided is invalid."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/exportable-image-users": {
            "get": {
                "description": "Search the list of users, whose images can be exported by the session's user, using username and display name. User needs to have `images.manage.all` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "query",
                        "description": "The query string.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "user_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/User"
                                            },
                                            "description": "The list of users."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve user list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve user list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve user list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/sessions/user/exportable-images": {
            "get": {
                "description": "Get image list uploaded by all users, that the current session's user is allowed to export. User needs to have `images.export` permission in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 500,
                            "default": 12
                        }
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending upload time), 3 (sorted by descending upload time), 4 (sorted by ascending publish time), 5 (sorted by descending publish time), 6 (sorted by ascending verify time), 7 (sorted by descending verify time).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 7,
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_image_types",
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_image_tags",
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_region_labels",
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_uploaded_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are uploaded by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_published_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_verified_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_upload_time_start",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_upload_time_end",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_start",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_end",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_start",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_end",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "original_filename_query",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_image_statuses",
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Image/properties/status"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "must_match_all_image_tags",
                        "description": "If equal to 1, images in the results must have all image tags provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_match_all_region_labels",
                        "description": "If equal to 1, images in the results must have all region labels provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_be_bookmarked",
                        "description": "If equal to 1, images in the results must be bookmarked by the session user.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_have_description",
                        "description": "If equal to 1, images in the results must have non-empty description.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_image_count": {
                                            "type": "integer",
                                            "description": "The total number of images meeting the filter condition."
                                        },
                                        "image_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Image"
                                            },
                                            "description": "The list of images meeting the filter condition, in the requested page."
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "type": "array",
                                                "items": {
                                                    "$ref": "#/components/schemas/ImageTag"
                                                }
                                            },
                                            "description": "The list of image tags each image in image_list has, in the same order."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve image list because one or more of the arguments provided is invalid."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/images/{image_id}": {
            "get": {
                "description": "Get an image. User needs to either (1) have `images.manage.self` permission and is getting an image of their own, (2) have `images.verify` permission and is getting an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be retrieved.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image": {
                                            "$ref": "#/components/schemas/Image"
                                        },
                                        "image_tag_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/ImageTag"
                                            },
                                            "description": "The list of tags this image is assigned with."
                                        },
                                        "region_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Region"
                                            },
                                            "description": "The list of regions in this image."
                                        },
                                        "can_edit": {
                                            "type": "boolean",
                                            "description": "If true, the user can edit the image. If false, the user can only view the image."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to retrieve image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to retrieve image because the image with image_id does not exist."
                    }
                }
            },
            "patch": {
                "description": "Update image metadata. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "$ref": "#/components/schemas/Image/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image": {
                                            "$ref": "#/components/schemas/Image"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the provided information does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id does not exist."
                    }
                }
            },
            "delete": {
                "description": "Delete image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, or (2) have `images.manage.all` permission in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete image because the image with image_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/region-snapshots": {
            "get": {
                "description": "Get all region snapshots of an image at a certain status. User needs to either (1) have `images.manage.self` permission and is getting the information of an image of their own, (2) have `images.verify` permission and is getting the information of an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is getting the information of an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be retrieved.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "at_status",
                        "in": "query",
                        "description": "When to retrieve the list of image snapshots.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/status"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved region snapshot list of image successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "region_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Region"
                                            },
                                            "description": "The list of region snapshots in this image."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve region snapshot list of image because of invalid at_status value."
                    },
                    "401": {
                        "description": "Failed to retrieve region snapshot list of image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve region snapshot list of image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to retrieve region snapshot list of image because the image with image_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/position": {
            "get": {
                "description": "Get the position of an image within the filtered image list. User needs to either (1) have `images.manage.self` permission and is getting the information of an image of their own, (2) have `images.verify` permission and is getting is getting the information of an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is getting the information of an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image List Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be retrieved.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "sort_order",
                        "description": "The order to return items in. Can be either 0 (sorted by ascending id), 1 (sorted by descending id), 2 (sorted by ascending upload time), 3 (sorted by descending upload time), 4 (sorted by ascending publish time), 5 (sorted by descending publish time), 6 (sorted by ascending verify time), 7 (sorted by descending verify time).",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 7,
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_image_types",
                        "description": "A list of image type IDs. If provided, filter for images that belong to one of these image types.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_image_tags",
                        "description": "A list of image tag IDs. If provided, filter for images that has one of these image tags (or all of these image tags, if must_match_all_image_tags = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_region_labels",
                        "description": "A list of region label IDs. If provided, filter for images that has one of these region labels (or all of these region labels, if must_match_all_region_labels = 1).",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_uploaded_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are uploaded by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_published_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are published by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_verified_by_user_ids",
                        "description": "A list of user IDs. If provided, filter for images that are verified by one of these users.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "filter_upload_time_start",
                        "description": "If non-zero, filter for images that are uploaded from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_upload_time_end",
                        "description": "If non-zero, filter for images that are uploaded before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_start",
                        "description": "If non-zero, filter for images that are published from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_publish_time_end",
                        "description": "If non-zero, filter for images that are published before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_start",
                        "description": "If non-zero, filter for images that are verified from or after this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "filter_verify_time_end",
                        "description": "If non-zero, filter for images that are verified before or on this timestamp.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "original_filename_query",
                        "description": "If provided, filter for images that have original name containing this query string (case insensitive).",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "maxLength": 256,
                            "default": ""
                        },
                        "allowEmptyValue": true,
                        "allowReserved": true
                    },
                    {
                        "name": "filter_image_statuses",
                        "description": "A list of image statuses. If provided, filter for images that have one of these statuses.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/components/schemas/Image/properties/status"
                            },
                            "maxItems": 10
                        }
                    },
                    {
                        "name": "must_match_all_image_tags",
                        "description": "If equal to 1, images in the results must have all image tags provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_match_all_region_labels",
                        "description": "If equal to 1, images in the results must have all region labels provided in the filter.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_be_bookmarked",
                        "description": "If equal to 1, images in the results must be bookmarked by the session user.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    },
                    {
                        "name": "must_have_description",
                        "description": "If equal to 1, images in the results must have non-empty description.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved position of image in filtered image list successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "position": {
                                            "type": "integer",
                                            "description": "1-indexed position of the image in the filtered image list."
                                        },
                                        "total_image_count": {
                                            "type": "integer",
                                            "description": "The total number of images meeting the filter condition."
                                        },
                                        "prev_image_id": {
                                            "type": "integer",
                                            "description": "The ID of the image before this image in the filter image list. If there is no previous image, this field is not returned."
                                        },
                                        "next_image_id": {
                                            "type": "integer",
                                            "description": "The ID of the image after this image in the filter image list. If there is no next image, this field is not returned."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve position of image in filtered image list because of invalid at_status value."
                    },
                    "401": {
                        "description": "Failed to retrieve position of image in filtered image list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve position of image in filtered image list because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to retrieve position of image in filtered image list because the image with image_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/image-type": {
            "patch": {
                "description": "Update image type of image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, or (2) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_type_id": {
                                        "$ref": "#/components/schemas/ImageType/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image": {
                                            "$ref": "#/components/schemas/Image"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id or the image type with image_type_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/status": {
            "patch": {
                "description": "Update image status. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, or (2) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "status": {
                                        "$ref": "#/components/schemas/Image/properties/status"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image": {
                                            "$ref": "#/components/schemas/Image"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the status value provided is invalid."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/tags": {
            "post": {
                "description": "Add an image tag to an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image_tag_id": {
                                        "$ref": "#/components/schemas/ImageTag/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the tag with image_tag_id cannot be assigned to image with image_id."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id or the tag with image_tag_id does not exist."
                    },
                    "409": {
                        "description": "Failed to update image because the image with image_id already has the tag with image_tag_id."
                    }
                }
            }
        },
        "/api/images/{image_id}/tags/{image_tag_id}": {
            "delete": {
                "description": "Remove an image tag from an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "image_tag_id",
                        "in": "path",
                        "description": "The image tag to be removed.",
                        "schema": {
                            "$ref": "#/components/schemas/ImageTag/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id or the tag with image_tag_id does not exist."
                    },
                    "409": {
                        "description": "Failed to update image because the image with image_id does not have the tag with image_tag_id."
                    }
                }
            }
        },
        "/api/images/{image_id}/bookmark": {
            "post": {
                "description": "Create a new bookmark on an image. User needs to either (1) have `images.manage.self` permission and is bookmarking an image of their own,  (2) have `images.verify` permission and is bookmarking an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is bookmarking an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be bookmarked.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "$ref": "#/components/schemas/ImageBookmark/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image bookmark created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_bookmark": {
                                            "$ref": "#/components/schemas/ImageBookmark"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to create image bookmark because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to create image bookmark because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to create image bookmark because the image with image_id does not exist."
                    }
                }
            },
            "get": {
                "description": "Get the session user's bookmark on an image. User needs to either (1) have `images.manage.self` permission and is bookmarking an image of their own,  (2) have `images.verify` permission and is bookmarking an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is bookmarking an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be get bookmark from.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image bookmark retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_bookmark": {
                                            "$ref": "#/components/schemas/ImageBookmark"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to retrieve image bookmark because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve image bookmark because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to retrieve image bookmark because the image with image_id does not exist."
                    },
                    "409": {
                        "description": "Failed to retrieve image bookmark because the user has not bookmarked the image yet."
                    }
                }
            },
            "patch": {
                "description": "Update the session user's bookmark on an image. User needs to either (1) have `images.manage.self` permission and is bookmarking an image of their own,  (2) have `images.verify` permission and is bookmarking an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is bookmarking an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to update bookmark.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "$ref": "#/components/schemas/ImageBookmark/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image bookmark updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "image_bookmark": {
                                            "$ref": "#/components/schemas/ImageBookmark"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to updated image bookmark because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to updated image bookmark because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to updated image bookmark because the image with image_id does not exist."
                    },
                    "409": {
                        "description": "Failed to updated image bookmark because the user has not bookmarked the image yet."
                    }
                }
            },
            "delete": {
                "description": "Delete the session user's bookmark on an image. User needs to either (1) have `images.manage.self` permission and is bookmarking an image of their own,  (2) have `images.verify` permission and is bookmarking an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is bookmarking an image that they are allowed to manage in order to call this API successfully.",
                "tags": [
                    "Image Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to delete bookmark.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Image bookmark deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete image bookmark because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete image bookmark because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete image bookmark because the image with image_id does not exist."
                    },
                    "409": {
                        "description": "Failed to delete image bookmark because the user has not bookmarked the image yet."
                    }
                }
            }
        },
        "/api/images/{image_id}/regions": {
            "post": {
                "description": "Add region to image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "border": {
                                        "$ref": "#/components/schemas/Region/properties/border"
                                    },
                                    "holes": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Polygon"
                                        },
                                        "description": "The holes inside the border of the region. Holes cannot intersect with each other, and cannot intersect with the border of the region.",
                                        "maxItems": 10
                                    },
                                    "region_label_id": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Image updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Region"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the provided information does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update image because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update image because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update image because the image with image_id does not exist."
                    },
                    "409": {
                        "description": "Failed to update image because the label with region_label_id cannot be assigned to image with image_id."
                    }
                }
            },
            "delete": {
                "description": "Remove all region from an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Region removed successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove region because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove region because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove region because the image with image_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/regions/{region_id}": {
            "delete": {
                "description": "Remove a region from an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_id",
                        "in": "path",
                        "description": "The region to be removed.",
                        "schema": {
                            "$ref": "#/components/schemas/Region/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Region removed successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to remove region because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to remove region because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to remove region because the image with image_id or the region with region_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/regions/{region_id}/boundary": {
            "patch": {
                "description": "Update the boundary a region of an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_id",
                        "in": "path",
                        "description": "The region to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Region/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "border": {
                                        "$ref": "#/components/schemas/Region/properties/border"
                                    },
                                    "holes": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/components/schemas/Polygon"
                                        },
                                        "description": "The holes inside the border of the region. Holes cannot intersect with each other, and cannot intersect with the border of the region.",
                                        "maxItems": 10
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Region updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "region": {
                                            "$ref": "#/components/schemas/Region"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the provided information does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update region because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update region because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update region because the image with image_id or the region with region_id does not exist."
                    }
                }
            }
        },
        "/api/images/{image_id}/regions/{region_id}/label": {
            "patch": {
                "description": "Update a region of an image. User needs to either (1) have `images.manage.self` permission and is updating an image of their own, (2) have `images.verify` permission and is updating an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is updating an image that they are allowed to edit in order to call this API successfully.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_id",
                        "in": "path",
                        "description": "The region to be updated.",
                        "schema": {
                            "$ref": "#/components/schemas/Region/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "region_label_id": {
                                        "$ref": "#/components/schemas/RegionLabel/properties/id"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Region updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "region": {
                                            "$ref": "#/components/schemas/Region"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to update image because the provided information does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to update region because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update region because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update region because the image with image_id or the region with region_id does not exist."
                    },
                    "409": {
                        "description": "Failed to update image because the label with region_label_id cannot be assigned to image with image_id."
                    }
                }
            }
        },
        "/api/images/{image_id}/regions/{region_id}/operation-logs": {
            "get": {
                "description": "Get the list of operation logs of a region. User needs to either (1) have `images.manage.self` permission and is retrieving information about an image of their own, (2) have `images.verify` permission and is retrieving information about an image with PUBLISHED status that they are allowed to verify, or (3) have `images.manage.all` permission and is retrieving information about an image that they are allowed to manage in order to call this API successfully. Any field that is not provided in the request will not be updated.",
                "tags": [
                    "Region Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "image_id",
                        "in": "path",
                        "description": "The image to retrieve information.",
                        "schema": {
                            "$ref": "#/components/schemas/Image/properties/id"
                        },
                        "required": true
                    },
                    {
                        "name": "region_id",
                        "in": "path",
                        "description": "The region to retrieve information.",
                        "schema": {
                            "$ref": "#/components/schemas/Region/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Region operation log list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "region_operation_log_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/RegionOperationLog"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to update region because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update region because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to update region because the image with image_id or the region with region_id does not exist."
                    }
                }
            }
        },
        "/api/exports": {
            "post": {
                "description": "Request for a new export. User needs to have `images.export` permission in order to call this API successfully.",
                "tags": [
                    "Export Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "$ref": "#/components/schemas/Export/properties/type"
                                    },
                                    "filter_options": {
                                        "$ref": "#/components/schemas/ImageListFilterOptions"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Export requested successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "export": {
                                            "$ref": "#/components/schemas/Export"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to request for export because the filter options are invalid."
                    },
                    "401": {
                        "description": "Failed to request for export because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to request for export because the user does not have the necessary permission."
                    }
                }
            },
            "get": {
                "description": "Get the list of exports requested by the current session user. User needs to have `images.export` permission in order to call this API successfully.",
                "tags": [
                    "Export Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved exports list successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_export_count": {
                                            "type": "integer",
                                            "description": "The total number of exports the session user has requested."
                                        },
                                        "export_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/Export"
                                            },
                                            "description": "The list of exports."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve export list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve export list because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve export list because the user does not have the necessary permission."
                    }
                }
            }
        },
        "/api/exports/{export_id}/exported-file": {
            "get": {
                "description": "Get the exported file of an export current session user. User needs to have `images.export` permission in order to call this API successfully.",
                "tags": [
                    "Export Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "export_id",
                        "in": "path",
                        "description": "The export to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/Export/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Retrieved export file successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary",
                                    "description": "The exported file."
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to retrieve exported file because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to retrieve exported file because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to retrieve exported file because the export cannot be found, or the export is not yet in DONE status."
                    }
                }
            }
        },
        "/api/exports/{export_id}": {
            "delete": {
                "description": "Delete an export request. User needs to have `images.export` permission and needs to be deleting an export they created in order to call this API successfully.",
                "tags": [
                    "Export Management"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "export_id",
                        "in": "path",
                        "description": "The export to be deleted.",
                        "schema": {
                            "$ref": "#/components/schemas/Export/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Deleted export successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete export because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete export because the user does not have the necessary permission."
                    },
                    "404": {
                        "description": "Failed to delete export because the export cannot be found."
                    }
                }
            }
        },
        "/api/pinned-pages": {
            "post": {
                "description": "Create a new pinned page. User need to be logged into the system in order to call this API successfully.",
                "tags": [
                    "Pinning Pages"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "url": {
                                        "$ref": "#/components/schemas/PinnedPage/properties/url"
                                    },
                                    "description": {
                                        "$ref": "#/components/schemas/PinnedPage/properties/description"
                                    },
                                    "screenshot_file": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "The screenshot of the page at the time of pinning."
                                    }
                                }
                            },
                            "encoding": {
                                "image_file": {
                                    "contentType": "image/*"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Pinned page created successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "pinned_page": {
                                            "$ref": "#/components/schemas/PinnedPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to create pinned page because the user is not logged in."
                    }
                }
            },
            "get": {
                "description": "Get the list of pinned pages of the session's user. User need to be logged into the system in order to call this API successfully.",
                "tags": [
                    "Pinning Pages"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "offset",
                        "description": "The index of the first item to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to be returned.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pinned page list retrieved successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_pinned_page_count": {
                                            "type": "integer",
                                            "description": "The total number of pinned pages."
                                        },
                                        "pinned_page_list": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PinnedPage"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Failed to retrieve pinned page list because the arguments provided does not satisfy the constraints."
                    },
                    "401": {
                        "description": "Failed to retrieve pinned page list because the user is not logged in."
                    }
                }
            }
        },
        "/api/pinned-pages/{pinned_page_id}": {
            "patch": {
                "description": "Update a pinned page information. User need to be logged into the system and is updating a pinned page they created in order to call this API successfully.",
                "tags": [
                    "Pinning Pages"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "pinned_page_id",
                        "in": "path",
                        "description": "The pinned page to update.",
                        "schema": {
                            "$ref": "#/components/schemas/PinnedPage/properties/id"
                        },
                        "required": true
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "$ref": "#/components/schemas/PinnedPage/properties/description"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Pinned page updated successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "pinned_page": {
                                            "$ref": "#/components/schemas/PinnedPage"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to update pinned page because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to update pinned page because the user does not have the required permission."
                    },
                    "404": {
                        "description": "Failed to update pinned page because the pinned page cannot be found."
                    }
                }
            },
            "delete": {
                "description": "Delete a pinned page information. User need to be logged into the system and is deleting a pinned page they created in order to call this API successfully.",
                "tags": [
                    "Pinning Pages"
                ],
                "security": [
                    {
                        "AuthenticationToken": []
                    }
                ],
                "parameters": [
                    {
                        "name": "pinned_page_id",
                        "in": "path",
                        "description": "The pinned page to delete.",
                        "schema": {
                            "$ref": "#/components/schemas/PinnedPage/properties/id"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pinned page deleted successfully.",
                        "headers": {
                            "Set-Cookie": {
                                "description": "Renewed authentication token, if the user old token is about to expire.",
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Failed to delete pinned page because the user is not logged in."
                    },
                    "403": {
                        "description": "Failed to delete pinned page because the user does not have the required permission."
                    },
                    "404": {
                        "description": "Failed to delete pinned page because the pinned page cannot be found."
                    }
                }
            }
        }
    }
}